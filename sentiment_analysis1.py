# -*- coding: utf-8 -*-
"""Sentiment Analysis1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pbKqYoa3mE6ZBHIYcVetPbpYG4hqtqcY
"""

import pandas as pd
import matplotlib.pyplot as plt
import tensorflow

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Dense, Dropout, SpatialDropout1D
from tensorflow.keras.layers import Embedding

dataframe = pd.read_csv("./Tweets.csv")
print(dataframe)

dataframe.head()

dataframe.columns

tweets = dataframe[['text','airline_sentiment']]
print(tweets.shape)
tweets.head(5)

tweets = tweets[tweets['airline_sentiment'] != 'neutral']
print(tweets.shape)
tweets.head(5)

tweets["airline_sentiment"].value_counts()

sentiment_label = tweets.airline_sentiment.factorize()
sentiment_label

tweet = tweets.text.values
tokenizer = Tokenizer(num_words=5000)
tokenizer.fit_on_texts(tweet)
vocab_size = len(tokenizer.word_index) + 1
encoded_docs = tokenizer.texts_to_sequences(tweet)
padded_sequence = pad_sequences(encoded_docs, maxlen=200)

print(tokenizer.word_index)

print(tweet[0])
print(encoded_docs[0])

print(padded_sequence[0])

embedding_vector_length = 32
model = Sequential()
model.add(Embedding(vocab_size, embedding_vector_length, input_length=200) )
model.add(SpatialDropout1D(0.25))
model.add(LSTM(50, dropout=0.5, recurrent_dropout=0.5))
model.add(Dropout(0.2))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam', metrics=['accuracy'])
print(model.summary())

history = model.fit(padded_sequence,sentiment_label[0],validation_split=0.2, epochs=5, batch_size=32)

plt.plot(history.history['accuracy'], label='acc')
plt.plot(history.history['val_accuracy'], label='val_acc')
plt.legend()
plt.show()
plt.savefig("Accuracy plot.jpg")

plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.legend()
plt.show()
plt.savefig("Loss plot.jpg")

def predict_sentiment(text):
    tw = tokenizer.texts_to_sequences([text])
    tw = pad_sequences(tw,maxlen=200)
    prediction = int(model.predict(tw).round().item())
    print("Predicted label: ", sentiment_label[1][prediction])

test_sentence1 = "I enjoyed my journey on this flight."
predict_sentiment(test_sentence1)

test_sentence2 = "This is the worst flight experience of my life!"
predict_sentiment(test_sentence2)

test_sentence3 = "The food served was not good"
predict_sentiment(test_sentence3)

test_sentence4 = "The staff was welcoming and friendly"
predict_sentiment(test_sentence4)

test_sentence5 = "The food served was not good even though the staff was friendly"
predict_sentiment(test_sentence5)

test_sentence6 = "The service was comfortable but crew behaviour was poor"
predict_sentiment(test_sentence6)

test_sentence7 = "Business class gives amazing experience during flight"
predict_sentiment(test_sentence7)

test_sentence8 = "Travelling in Economy class is troublesome"
predict_sentiment(test_sentence8)

test_sentence9 = "The airlines are making huge profits due to Cricket World cup"
predict_sentiment(test_sentence9)

test_sentence10 = "Airports are awfully crowded these days"
predict_sentiment(test_sentence10)